// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/init.go
//
// Generated by this command:
//
//	mockgen -source cmd/init.go -package cmd -typed --destination cmd/mock_test.go
//

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	reflect "reflect"

	auto "github.com/pulumi/pulumi/sdk/v3/go/auto"
	gomock "go.uber.org/mock/gomock"
)

// MockfetchWithContexter is a mock of fetchWithContexter interface.
type MockfetchWithContexter struct {
	ctrl     *gomock.Controller
	recorder *MockfetchWithContexterMockRecorder
}

// MockfetchWithContexterMockRecorder is the mock recorder for MockfetchWithContexter.
type MockfetchWithContexterMockRecorder struct {
	mock *MockfetchWithContexter
}

// NewMockfetchWithContexter creates a new mock instance.
func NewMockfetchWithContexter(ctrl *gomock.Controller) *MockfetchWithContexter {
	mock := &MockfetchWithContexter{ctrl: ctrl}
	mock.recorder = &MockfetchWithContexterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfetchWithContexter) EXPECT() *MockfetchWithContexterMockRecorder {
	return m.recorder
}

// Digest mocks base method.
func (m *MockfetchWithContexter) Digest() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Digest")
	ret0, _ := ret[0].(string)
	return ret0
}

// Digest indicates an expected call of Digest.
func (mr *MockfetchWithContexterMockRecorder) Digest() *MockfetchWithContexterDigestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Digest", reflect.TypeOf((*MockfetchWithContexter)(nil).Digest))
	return &MockfetchWithContexterDigestCall{Call: call}
}

// MockfetchWithContexterDigestCall wrap *gomock.Call
type MockfetchWithContexterDigestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockfetchWithContexterDigestCall) Return(arg0 string) *MockfetchWithContexterDigestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockfetchWithContexterDigestCall) Do(f func() string) *MockfetchWithContexterDigestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockfetchWithContexterDigestCall) DoAndReturn(f func() string) *MockfetchWithContexterDigestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchWithContext mocks base method.
func (m *MockfetchWithContexter) FetchWithContext(ctx context.Context, archiveURL, digest, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWithContext", ctx, archiveURL, digest, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchWithContext indicates an expected call of FetchWithContext.
func (mr *MockfetchWithContexterMockRecorder) FetchWithContext(ctx, archiveURL, digest, dir any) *MockfetchWithContexterFetchWithContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWithContext", reflect.TypeOf((*MockfetchWithContexter)(nil).FetchWithContext), ctx, archiveURL, digest, dir)
	return &MockfetchWithContexterFetchWithContextCall{Call: call}
}

// MockfetchWithContexterFetchWithContextCall wrap *gomock.Call
type MockfetchWithContexterFetchWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockfetchWithContexterFetchWithContextCall) Return(arg0 error) *MockfetchWithContexterFetchWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockfetchWithContexterFetchWithContextCall) Do(f func(context.Context, string, string, string) error) *MockfetchWithContexterFetchWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockfetchWithContexterFetchWithContextCall) DoAndReturn(f func(context.Context, string, string, string) error) *MockfetchWithContexterFetchWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// URL mocks base method.
func (m *MockfetchWithContexter) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockfetchWithContexterMockRecorder) URL() *MockfetchWithContexterURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockfetchWithContexter)(nil).URL))
	return &MockfetchWithContexterURLCall{Call: call}
}

// MockfetchWithContexterURLCall wrap *gomock.Call
type MockfetchWithContexterURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockfetchWithContexterURLCall) Return(arg0 string) *MockfetchWithContexterURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockfetchWithContexterURLCall) Do(f func() string) *MockfetchWithContexterURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockfetchWithContexterURLCall) DoAndReturn(f func() string) *MockfetchWithContexterURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocknewLocalWorkspacer is a mock of newLocalWorkspacer interface.
type MocknewLocalWorkspacer struct {
	ctrl     *gomock.Controller
	recorder *MocknewLocalWorkspacerMockRecorder
}

// MocknewLocalWorkspacerMockRecorder is the mock recorder for MocknewLocalWorkspacer.
type MocknewLocalWorkspacerMockRecorder struct {
	mock *MocknewLocalWorkspacer
}

// NewMocknewLocalWorkspacer creates a new mock instance.
func NewMocknewLocalWorkspacer(ctrl *gomock.Controller) *MocknewLocalWorkspacer {
	mock := &MocknewLocalWorkspacer{ctrl: ctrl}
	mock.recorder = &MocknewLocalWorkspacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknewLocalWorkspacer) EXPECT() *MocknewLocalWorkspacerMockRecorder {
	return m.recorder
}

// NewLocalWorkspace mocks base method.
func (m *MocknewLocalWorkspacer) NewLocalWorkspace(arg0 context.Context, arg1 ...auto.LocalWorkspaceOption) (auto.Workspace, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewLocalWorkspace", varargs...)
	ret0, _ := ret[0].(auto.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLocalWorkspace indicates an expected call of NewLocalWorkspace.
func (mr *MocknewLocalWorkspacerMockRecorder) NewLocalWorkspace(arg0 any, arg1 ...any) *MocknewLocalWorkspacerNewLocalWorkspaceCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLocalWorkspace", reflect.TypeOf((*MocknewLocalWorkspacer)(nil).NewLocalWorkspace), varargs...)
	return &MocknewLocalWorkspacerNewLocalWorkspaceCall{Call: call}
}

// MocknewLocalWorkspacerNewLocalWorkspaceCall wrap *gomock.Call
type MocknewLocalWorkspacerNewLocalWorkspaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknewLocalWorkspacerNewLocalWorkspaceCall) Return(arg0 auto.Workspace, arg1 error) *MocknewLocalWorkspacerNewLocalWorkspaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknewLocalWorkspacerNewLocalWorkspaceCall) Do(f func(context.Context, ...auto.LocalWorkspaceOption) (auto.Workspace, error)) *MocknewLocalWorkspacerNewLocalWorkspaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknewLocalWorkspacerNewLocalWorkspaceCall) DoAndReturn(f func(context.Context, ...auto.LocalWorkspaceOption) (auto.Workspace, error)) *MocknewLocalWorkspacerNewLocalWorkspaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Revision mocks base method.
func (m *MocknewLocalWorkspacer) Revision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(string)
	return ret0
}

// Revision indicates an expected call of Revision.
func (mr *MocknewLocalWorkspacerMockRecorder) Revision() *MocknewLocalWorkspacerRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MocknewLocalWorkspacer)(nil).Revision))
	return &MocknewLocalWorkspacerRevisionCall{Call: call}
}

// MocknewLocalWorkspacerRevisionCall wrap *gomock.Call
type MocknewLocalWorkspacerRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknewLocalWorkspacerRevisionCall) Return(arg0 string) *MocknewLocalWorkspacerRevisionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknewLocalWorkspacerRevisionCall) Do(f func() string) *MocknewLocalWorkspacerRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknewLocalWorkspacerRevisionCall) DoAndReturn(f func() string) *MocknewLocalWorkspacerRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// URL mocks base method.
func (m *MocknewLocalWorkspacer) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MocknewLocalWorkspacerMockRecorder) URL() *MocknewLocalWorkspacerURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MocknewLocalWorkspacer)(nil).URL))
	return &MocknewLocalWorkspacerURLCall{Call: call}
}

// MocknewLocalWorkspacerURLCall wrap *gomock.Call
type MocknewLocalWorkspacerURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknewLocalWorkspacerURLCall) Return(arg0 string) *MocknewLocalWorkspacerURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknewLocalWorkspacerURLCall) Do(f func() string) *MocknewLocalWorkspacerURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknewLocalWorkspacerURLCall) DoAndReturn(f func() string) *MocknewLocalWorkspacerURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
