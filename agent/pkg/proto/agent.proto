syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/pulumi/pulumi-kubernetes-operator/v2/agent/pkg/proto";

package agent;

service AutomationService {

  /**
   * WhoAmI returns detailed information about the currently logged-in Pulumi
   * identity.
   */
  rpc WhoAmI(WhoAmIRequest) returns (WhoAmIResult) {}

  /**
   * Info returns information about the given stack.
   */
  rpc SelectStack(SelectStackRequest) returns (SelectStackResult) {}

  /**
   * Info returns information about the given stack.
   */
  rpc Info(InfoRequest) returns (InfoResult) {}

  /**
   * SetAllConfig sets multiple configuration values for a stack.
   */
  rpc SetAllConfig(SetAllConfigRequest) returns (SetAllConfigResult) {}

  /**
   * Install installs the Pulumi plugins and dependencies.
   */
  rpc Install(InstallRequest) returns (InstallResult) {}

  /**
   * Preview performs a dry-run update to a stack, returning the expected
   * changes.
   */
  rpc Preview(PreviewRequest) returns (stream PreviewStream) {}

  /**
   * Refresh updates the resources in a stack to match the current state of the
   * cloud provider.
   */
  rpc Refresh(RefreshRequest) returns (stream RefreshStream) {}

  /**
   * Up creates or updates the resources in a stack, returning the actual
   * changes.
   */
  rpc Up(UpRequest) returns (stream UpStream) {}

  /**
   * Destroy deletes all resources in a stack.
   */
  rpc Destroy(DestroyRequest) returns (stream DestroyStream) {}
}

message WhoAmIRequest {}

// WhoAmIResult contains detailed information about the currently logged-in
// Pulumi identity.
message WhoAmIResult {
  string user = 1;
  repeated string organizations = 2;
  string url = 3;
}

message SelectStackRequest {
  string stack_name = 1;
  optional bool create = 2;
  optional string secrets_provider = 3;
}

message SelectStackResult { StackSummary summary = 1; }

message InfoRequest {}

message InfoResult { StackSummary summary = 1; }

// StackSummary is a description of a stack and its current status.
message StackSummary {
  string name = 1;
  google.protobuf.Timestamp last_update = 2;
  bool update_in_progress = 3;
  optional int32 resource_count = 4;
  optional string url = 5;
}

message SetAllConfigRequest {
  repeated ConfigItem config = 1; // The config items to add to the configuration.
  repeated string environment = 2; // The ESC environment(s) to add to the configuration.
}

message ConfigItem {
  string key = 1; // The config's key.
  optional bool path = 2; // Parse the key as a paths in a map or list rather than as a raw string.
  oneof v {
    google.protobuf.Value value = 3; // A literal value.
    ConfigValueFrom value_from = 4; // A value read from the environment or local disk.
  }
  optional bool secret = 5; // Whether the config is a secret.
}

message ConfigValueFrom {
  oneof f {
    string env = 1;  // The name of an environment variable to read>
    string path = 2; // The path to a file to read.
  }
}

message SetAllConfigResult {}

message InstallRequest {}

message InstallResult {}

message RefreshRequest {
  // parallel is the number of resource operations to run in parallel at once
  // (1 for no parallelism). Defaults to unbounded. (default 2147483647)
  optional int32 parallel = 1;
  // message (optional) to associate with the preview operation
  optional string message = 2;
  // Return an error if any changes occur during this refresh
  optional bool expect_no_changes = 3;
  // Specify an exclusive list of resource URNs to refresh
  repeated string target = 4;
}

message RefreshStream {
  oneof response {
    // describes a Pulumi engine event, such as a change to a resource or
    // diagnostic message.
    google.protobuf.Struct event = 1;
    RefreshResult result = 2;
  }
}

message RefreshResult {
  string stdout = 1;
  string stderr = 2;
  UpdateSummary summary = 3;
  optional string permalink = 4;
}

message PreviewRequest {
  // Parallel is the number of resource operations to run in parallel at once
  // (1 for no parallelism). Defaults to unbounded. (default 2147483647)
  optional int32 parallel = 1;
  // Message (optional) to associate with the preview operation
  optional string message = 2;
  // Return an error if any changes occur during this preview
  optional bool expect_no_changes = 3;
  // Specify resources to replace
  repeated string replace = 4;
  // Specify an exclusive list of resource URNs to update
  repeated string target = 5;
  // Allows updating of dependent targets discovered but not specified in the
  // Target list
  optional bool target_dependents = 6;
  // Run one or more policy packs as part of this update
  repeated PolicyPack policy_pack = 7;
  // Refresh will run a refresh before the preview.
  optional bool refresh = 8;
}

message PolicyPack { string name = 1; }

message PreviewStream {
  oneof response {
    // describes a Pulumi engine event, such as a change to a resource or
    // diagnostic message.
    google.protobuf.Struct event = 1;
    PreviewResult result = 2;
  }
}

message PreviewResult {
  string stdout = 1;
  string stderr = 2;
  UpdateSummary summary = 3;
  optional string permalink = 4;
}

message UpRequest {
  // parallel is the number of resource operations to run in parallel at once
  // (1 for no parallelism). Defaults to unbounded. (default 2147483647)
  optional int32 parallel = 1;
  // message (optional) to associate with the preview operation
  optional string message = 2;
  // Return an error if any changes occur during this update
  optional bool expect_no_changes = 3;
  // Specify resources to replace
  repeated string replace = 4;
  // Specify an exclusive list of resource URNs to update
  repeated string target = 5;
  // target_dependents allows updating of dependent targets discovered but not
  // specified in the Target list
  optional bool target_dependents = 6;
  // // Use the update plan at the given path.
  // optional string plan = 7;
  // Run one or more policy packs as part of this update.
  repeated PolicyPack policy_pack = 8;
  // refresh will run a refresh before the update.
  optional bool refresh = 9;
  // continue_on_error will continue to perform the update operation despite the
  // occurrence of errors.
  optional bool continue_on_error = 10;
}

message UpStream {
  oneof response {
    // describes a Pulumi engine event, such as a change to a resource or
    // diagnostic message.
    google.protobuf.Struct event = 1;
    UpResult result = 2;
  }
}

message UpResult {
  string stdout = 1;
  string stderr = 2;
  UpdateSummary summary = 3;
  optional string permalink = 4;
  map<string, OutputValue> outputs = 5;
}

message OutputValue {
  bytes value = 1;
  bool secret = 2;
}

message UpdateSummary {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  string result = 3;
  string message = 4;
}

message DestroyRequest {
  // Parallel is the number of resource operations to run in parallel at once
  // (1 for no parallelism). Defaults to unbounded. (default 2147483647)
  optional int32 parallel = 1;
  // Message (optional) to associate with the destroy operation
  optional string message = 2;
  // Specify an exclusive list of resource URNs to destroy
  repeated string target = 3;
  // Allows updating of dependent targets discovered but not specified in the
  // Target list
  optional bool target_dependents = 4;
  // Refresh will run a refresh before the destroy.
  optional bool refresh = 5;
  // continue_on_error will continue to perform the update operation despite the
  // occurrence of errors.
  optional bool continue_on_error = 6;
  // Remove the stack and its configuration after all resources in the stack
  // have been deleted.
  optional bool remove = 7;
}

message DestroyStream {
  oneof response {
    // describes a Pulumi engine event, such as a change to a resource or
    // diagnostic message.
    google.protobuf.Struct event = 1;
    DestroyResult result = 2;
  }
}

message DestroyResult {
  string stdout = 1;
  string stderr = 2;
  UpdateSummary summary = 3;
  optional string permalink = 4;
}

// Describes the cause of the error from Pulumi CLI with structured details.
message PulumiErrorInfo {
  int32 code = 1;
  string reason = 2;
  string message = 3;
}