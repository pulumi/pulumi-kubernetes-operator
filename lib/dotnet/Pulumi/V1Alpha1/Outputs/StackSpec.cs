// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Pulumi.V1Alpha1
{

    [OutputType]
    public sealed class StackSpec
    {
        /// <summary>
        /// (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
        /// </summary>
        public readonly string AccessTokenSecret;
        /// <summary>
        /// (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://&lt;my-pulumi-state-bucket&gt;"   - Azure:                       "azblob://&lt;my-pulumi-state-bucket&gt;"   - GCP:                         "gs://&lt;my-pulumi-state-bucket&gt;" See: https://www.pulumi.com/docs/intro/concepts/state/
        /// </summary>
        public readonly string Backend;
        /// <summary>
        /// (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
        /// </summary>
        public readonly string Commit;
        /// <summary>
        /// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Config;
        /// <summary>
        /// (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
        /// </summary>
        public readonly bool DestroyOnFinalize;
        /// <summary>
        /// (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
        /// </summary>
        public readonly ImmutableArray<string> EnvSecrets;
        /// <summary>
        /// (optional) Envs is an optional array of config maps containing environment variables to set.
        /// </summary>
        public readonly ImmutableArray<string> Envs;
        /// <summary>
        /// (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        /// </summary>
        public readonly bool ExpectNoRefreshChanges;
        /// <summary>
        /// (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
        /// </summary>
        public readonly string GitAuthSecret;
        /// <summary>
        /// ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        /// </summary>
        public readonly string ProjectRepo;
        /// <summary>
        /// (optional) Refresh can be set to true to refresh the stack before it is updated.
        /// </summary>
        public readonly bool Refresh;
        /// <summary>
        /// (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        /// </summary>
        public readonly string RepoDir;
        /// <summary>
        /// (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        /// </summary>
        public readonly bool RetryOnUpdateConflict;
        /// <summary>
        /// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Secrets;
        /// <summary>
        /// (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
        /// </summary>
        public readonly string SecretsProvider;
        /// <summary>
        /// Stack is the fully qualified name of the stack to deploy (&lt;org&gt;/&lt;stack&gt;).
        /// </summary>
        public readonly string Stack;

        [OutputConstructor]
        private StackSpec(
            string accessTokenSecret,

            string backend,

            string branch,

            string commit,

            ImmutableDictionary<string, string> config,

            bool destroyOnFinalize,

            ImmutableArray<string> envSecrets,

            ImmutableArray<string> envs,

            bool expectNoRefreshChanges,

            string gitAuthSecret,

            string projectRepo,

            bool refresh,

            string repoDir,

            bool retryOnUpdateConflict,

            ImmutableDictionary<string, string> secrets,

            string secretsProvider,

            string stack)
        {
            AccessTokenSecret = accessTokenSecret;
            Backend = backend;
            Branch = branch;
            Commit = commit;
            Config = config;
            DestroyOnFinalize = destroyOnFinalize;
            EnvSecrets = envSecrets;
            Envs = envs;
            ExpectNoRefreshChanges = expectNoRefreshChanges;
            GitAuthSecret = gitAuthSecret;
            ProjectRepo = projectRepo;
            Refresh = refresh;
            RepoDir = repoDir;
            RetryOnUpdateConflict = retryOnUpdateConflict;
            Secrets = secrets;
            SecretsProvider = secretsProvider;
            Stack = stack;
        }
    }
}
