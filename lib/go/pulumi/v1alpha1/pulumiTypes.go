// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Stack is the Schema for the stacks API
type StackType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// StackSpec defines the desired state of Pulumi Stack being managed by this operator.
	Spec *StackSpec `pulumi:"spec"`
	// StackStatus defines the observed state of Stack
	Status *StackStatus `pulumi:"status"`
}

// StackTypeInput is an input type that accepts StackTypeArgs and StackTypeOutput values.
// You can construct a concrete instance of `StackTypeInput` via:
//
//          StackTypeArgs{...}
type StackTypeInput interface {
	pulumi.Input

	ToStackTypeOutput() StackTypeOutput
	ToStackTypeOutputWithContext(context.Context) StackTypeOutput
}

// Stack is the Schema for the stacks API
type StackTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// StackSpec defines the desired state of Pulumi Stack being managed by this operator.
	Spec StackSpecPtrInput `pulumi:"spec"`
	// StackStatus defines the observed state of Stack
	Status StackStatusPtrInput `pulumi:"status"`
}

func (StackTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackType)(nil)).Elem()
}

func (i StackTypeArgs) ToStackTypeOutput() StackTypeOutput {
	return i.ToStackTypeOutputWithContext(context.Background())
}

func (i StackTypeArgs) ToStackTypeOutputWithContext(ctx context.Context) StackTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackTypeOutput)
}

// Stack is the Schema for the stacks API
type StackTypeOutput struct{ *pulumi.OutputState }

func (StackTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackType)(nil)).Elem()
}

func (o StackTypeOutput) ToStackTypeOutput() StackTypeOutput {
	return o
}

func (o StackTypeOutput) ToStackTypeOutputWithContext(ctx context.Context) StackTypeOutput {
	return o
}

func (o StackTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o StackTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o StackTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v StackType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// StackSpec defines the desired state of Pulumi Stack being managed by this operator.
func (o StackTypeOutput) Spec() StackSpecPtrOutput {
	return o.ApplyT(func(v StackType) *StackSpec { return v.Spec }).(StackSpecPtrOutput)
}

// StackStatus defines the observed state of Stack
func (o StackTypeOutput) Status() StackStatusPtrOutput {
	return o.ApplyT(func(v StackType) *StackStatus { return v.Status }).(StackStatusPtrOutput)
}

type StackMetadata struct {
}

// StackMetadataInput is an input type that accepts StackMetadataArgs and StackMetadataOutput values.
// You can construct a concrete instance of `StackMetadataInput` via:
//
//          StackMetadataArgs{...}
type StackMetadataInput interface {
	pulumi.Input

	ToStackMetadataOutput() StackMetadataOutput
	ToStackMetadataOutputWithContext(context.Context) StackMetadataOutput
}

type StackMetadataArgs struct {
}

func (StackMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackMetadata)(nil)).Elem()
}

func (i StackMetadataArgs) ToStackMetadataOutput() StackMetadataOutput {
	return i.ToStackMetadataOutputWithContext(context.Background())
}

func (i StackMetadataArgs) ToStackMetadataOutputWithContext(ctx context.Context) StackMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackMetadataOutput)
}

type StackMetadataOutput struct{ *pulumi.OutputState }

func (StackMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackMetadata)(nil)).Elem()
}

func (o StackMetadataOutput) ToStackMetadataOutput() StackMetadataOutput {
	return o
}

func (o StackMetadataOutput) ToStackMetadataOutputWithContext(ctx context.Context) StackMetadataOutput {
	return o
}

// StackSpec defines the desired state of Pulumi Stack being managed by this operator.
type StackSpec struct {
	// (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
	AccessTokenSecret *string `pulumi:"accessTokenSecret"`
	// (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://<my-pulumi-state-bucket>"   - Azure:                       "azblob://<my-pulumi-state-bucket>"   - GCP:                         "gs://<my-pulumi-state-bucket>" See: https://www.pulumi.com/docs/intro/concepts/state/
	Backend *string `pulumi:"backend"`
	// (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
	Branch *string `pulumi:"branch"`
	// (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
	Commit *string `pulumi:"commit"`
	// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
	Config map[string]string `pulumi:"config"`
	// (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
	DestroyOnFinalize *bool `pulumi:"destroyOnFinalize"`
	// (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
	EnvSecrets []string `pulumi:"envSecrets"`
	// (optional) Envs is an optional array of config maps containing environment variables to set.
	Envs []string `pulumi:"envs"`
	// (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
	ExpectNoRefreshChanges *bool `pulumi:"expectNoRefreshChanges"`
	// (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
	GitAuthSecret *string `pulumi:"gitAuthSecret"`
	// ProjectRepo is the git source control repository from which we fetch the project code and configuration.
	ProjectRepo string `pulumi:"projectRepo"`
	// (optional) Refresh can be set to true to refresh the stack before it is updated.
	Refresh *bool `pulumi:"refresh"`
	// (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
	RepoDir *string `pulumi:"repoDir"`
	// (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
	RetryOnUpdateConflict *bool `pulumi:"retryOnUpdateConflict"`
	// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
	Secrets map[string]string `pulumi:"secrets"`
	// (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
	SecretsProvider *string `pulumi:"secretsProvider"`
	// Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
	Stack string `pulumi:"stack"`
}

// StackSpecInput is an input type that accepts StackSpecArgs and StackSpecOutput values.
// You can construct a concrete instance of `StackSpecInput` via:
//
//          StackSpecArgs{...}
type StackSpecInput interface {
	pulumi.Input

	ToStackSpecOutput() StackSpecOutput
	ToStackSpecOutputWithContext(context.Context) StackSpecOutput
}

// StackSpec defines the desired state of Pulumi Stack being managed by this operator.
type StackSpecArgs struct {
	// (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
	AccessTokenSecret pulumi.StringPtrInput `pulumi:"accessTokenSecret"`
	// (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://<my-pulumi-state-bucket>"   - Azure:                       "azblob://<my-pulumi-state-bucket>"   - GCP:                         "gs://<my-pulumi-state-bucket>" See: https://www.pulumi.com/docs/intro/concepts/state/
	Backend pulumi.StringPtrInput `pulumi:"backend"`
	// (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
	Config pulumi.StringMapInput `pulumi:"config"`
	// (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
	DestroyOnFinalize pulumi.BoolPtrInput `pulumi:"destroyOnFinalize"`
	// (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
	EnvSecrets pulumi.StringArrayInput `pulumi:"envSecrets"`
	// (optional) Envs is an optional array of config maps containing environment variables to set.
	Envs pulumi.StringArrayInput `pulumi:"envs"`
	// (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
	ExpectNoRefreshChanges pulumi.BoolPtrInput `pulumi:"expectNoRefreshChanges"`
	// (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
	GitAuthSecret pulumi.StringPtrInput `pulumi:"gitAuthSecret"`
	// ProjectRepo is the git source control repository from which we fetch the project code and configuration.
	ProjectRepo pulumi.StringInput `pulumi:"projectRepo"`
	// (optional) Refresh can be set to true to refresh the stack before it is updated.
	Refresh pulumi.BoolPtrInput `pulumi:"refresh"`
	// (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
	RepoDir pulumi.StringPtrInput `pulumi:"repoDir"`
	// (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
	RetryOnUpdateConflict pulumi.BoolPtrInput `pulumi:"retryOnUpdateConflict"`
	// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
	Secrets pulumi.StringMapInput `pulumi:"secrets"`
	// (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
	SecretsProvider pulumi.StringPtrInput `pulumi:"secretsProvider"`
	// Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
	Stack pulumi.StringInput `pulumi:"stack"`
}

func (StackSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSpec)(nil)).Elem()
}

func (i StackSpecArgs) ToStackSpecOutput() StackSpecOutput {
	return i.ToStackSpecOutputWithContext(context.Background())
}

func (i StackSpecArgs) ToStackSpecOutputWithContext(ctx context.Context) StackSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSpecOutput)
}

func (i StackSpecArgs) ToStackSpecPtrOutput() StackSpecPtrOutput {
	return i.ToStackSpecPtrOutputWithContext(context.Background())
}

func (i StackSpecArgs) ToStackSpecPtrOutputWithContext(ctx context.Context) StackSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSpecOutput).ToStackSpecPtrOutputWithContext(ctx)
}

// StackSpecPtrInput is an input type that accepts StackSpecArgs, StackSpecPtr and StackSpecPtrOutput values.
// You can construct a concrete instance of `StackSpecPtrInput` via:
//
//          StackSpecArgs{...}
//
//  or:
//
//          nil
type StackSpecPtrInput interface {
	pulumi.Input

	ToStackSpecPtrOutput() StackSpecPtrOutput
	ToStackSpecPtrOutputWithContext(context.Context) StackSpecPtrOutput
}

type stackSpecPtrType StackSpecArgs

func StackSpecPtr(v *StackSpecArgs) StackSpecPtrInput {
	return (*stackSpecPtrType)(v)
}

func (*stackSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSpec)(nil)).Elem()
}

func (i *stackSpecPtrType) ToStackSpecPtrOutput() StackSpecPtrOutput {
	return i.ToStackSpecPtrOutputWithContext(context.Background())
}

func (i *stackSpecPtrType) ToStackSpecPtrOutputWithContext(ctx context.Context) StackSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSpecPtrOutput)
}

// StackSpec defines the desired state of Pulumi Stack being managed by this operator.
type StackSpecOutput struct{ *pulumi.OutputState }

func (StackSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSpec)(nil)).Elem()
}

func (o StackSpecOutput) ToStackSpecOutput() StackSpecOutput {
	return o
}

func (o StackSpecOutput) ToStackSpecOutputWithContext(ctx context.Context) StackSpecOutput {
	return o
}

func (o StackSpecOutput) ToStackSpecPtrOutput() StackSpecPtrOutput {
	return o.ToStackSpecPtrOutputWithContext(context.Background())
}

func (o StackSpecOutput) ToStackSpecPtrOutputWithContext(ctx context.Context) StackSpecPtrOutput {
	return o.ApplyT(func(v StackSpec) *StackSpec {
		return &v
	}).(StackSpecPtrOutput)
}

// (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
func (o StackSpecOutput) AccessTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.AccessTokenSecret }).(pulumi.StringPtrOutput)
}

// (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://<my-pulumi-state-bucket>"   - Azure:                       "azblob://<my-pulumi-state-bucket>"   - GCP:                         "gs://<my-pulumi-state-bucket>" See: https://www.pulumi.com/docs/intro/concepts/state/
func (o StackSpecOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.Backend }).(pulumi.StringPtrOutput)
}

// (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
func (o StackSpecOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
func (o StackSpecOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
func (o StackSpecOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v StackSpec) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
func (o StackSpecOutput) DestroyOnFinalize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSpec) *bool { return v.DestroyOnFinalize }).(pulumi.BoolPtrOutput)
}

// (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
func (o StackSpecOutput) EnvSecrets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSpec) []string { return v.EnvSecrets }).(pulumi.StringArrayOutput)
}

// (optional) Envs is an optional array of config maps containing environment variables to set.
func (o StackSpecOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSpec) []string { return v.Envs }).(pulumi.StringArrayOutput)
}

// (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
func (o StackSpecOutput) ExpectNoRefreshChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSpec) *bool { return v.ExpectNoRefreshChanges }).(pulumi.BoolPtrOutput)
}

// (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
func (o StackSpecOutput) GitAuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.GitAuthSecret }).(pulumi.StringPtrOutput)
}

// ProjectRepo is the git source control repository from which we fetch the project code and configuration.
func (o StackSpecOutput) ProjectRepo() pulumi.StringOutput {
	return o.ApplyT(func(v StackSpec) string { return v.ProjectRepo }).(pulumi.StringOutput)
}

// (optional) Refresh can be set to true to refresh the stack before it is updated.
func (o StackSpecOutput) Refresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSpec) *bool { return v.Refresh }).(pulumi.BoolPtrOutput)
}

// (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
func (o StackSpecOutput) RepoDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.RepoDir }).(pulumi.StringPtrOutput)
}

// (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
func (o StackSpecOutput) RetryOnUpdateConflict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSpec) *bool { return v.RetryOnUpdateConflict }).(pulumi.BoolPtrOutput)
}

// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
func (o StackSpecOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v StackSpec) map[string]string { return v.Secrets }).(pulumi.StringMapOutput)
}

// (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
func (o StackSpecOutput) SecretsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSpec) *string { return v.SecretsProvider }).(pulumi.StringPtrOutput)
}

// Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
func (o StackSpecOutput) Stack() pulumi.StringOutput {
	return o.ApplyT(func(v StackSpec) string { return v.Stack }).(pulumi.StringOutput)
}

type StackSpecPtrOutput struct{ *pulumi.OutputState }

func (StackSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSpec)(nil)).Elem()
}

func (o StackSpecPtrOutput) ToStackSpecPtrOutput() StackSpecPtrOutput {
	return o
}

func (o StackSpecPtrOutput) ToStackSpecPtrOutputWithContext(ctx context.Context) StackSpecPtrOutput {
	return o
}

func (o StackSpecPtrOutput) Elem() StackSpecOutput {
	return o.ApplyT(func(v *StackSpec) StackSpec { return *v }).(StackSpecOutput)
}

// (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
func (o StackSpecPtrOutput) AccessTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.AccessTokenSecret
	}).(pulumi.StringPtrOutput)
}

// (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://<my-pulumi-state-bucket>"   - Azure:                       "azblob://<my-pulumi-state-bucket>"   - GCP:                         "gs://<my-pulumi-state-bucket>" See: https://www.pulumi.com/docs/intro/concepts/state/
func (o StackSpecPtrOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.Backend
	}).(pulumi.StringPtrOutput)
}

// (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
func (o StackSpecPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
func (o StackSpecPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
func (o StackSpecPtrOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringMapOutput)
}

// (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
func (o StackSpecPtrOutput) DestroyOnFinalize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DestroyOnFinalize
	}).(pulumi.BoolPtrOutput)
}

// (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
func (o StackSpecPtrOutput) EnvSecrets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSpec) []string {
		if v == nil {
			return nil
		}
		return v.EnvSecrets
	}).(pulumi.StringArrayOutput)
}

// (optional) Envs is an optional array of config maps containing environment variables to set.
func (o StackSpecPtrOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSpec) []string {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(pulumi.StringArrayOutput)
}

// (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
func (o StackSpecPtrOutput) ExpectNoRefreshChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ExpectNoRefreshChanges
	}).(pulumi.BoolPtrOutput)
}

// (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
func (o StackSpecPtrOutput) GitAuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.GitAuthSecret
	}).(pulumi.StringPtrOutput)
}

// ProjectRepo is the git source control repository from which we fetch the project code and configuration.
func (o StackSpecPtrOutput) ProjectRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectRepo
	}).(pulumi.StringPtrOutput)
}

// (optional) Refresh can be set to true to refresh the stack before it is updated.
func (o StackSpecPtrOutput) Refresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Refresh
	}).(pulumi.BoolPtrOutput)
}

// (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
func (o StackSpecPtrOutput) RepoDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.RepoDir
	}).(pulumi.StringPtrOutput)
}

// (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
func (o StackSpecPtrOutput) RetryOnUpdateConflict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSpec) *bool {
		if v == nil {
			return nil
		}
		return v.RetryOnUpdateConflict
	}).(pulumi.BoolPtrOutput)
}

// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
func (o StackSpecPtrOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(pulumi.StringMapOutput)
}

// (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
func (o StackSpecPtrOutput) SecretsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return v.SecretsProvider
	}).(pulumi.StringPtrOutput)
}

// Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
func (o StackSpecPtrOutput) Stack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Stack
	}).(pulumi.StringPtrOutput)
}

// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
type StackSpecConfig struct {
}

// StackSpecConfigInput is an input type that accepts StackSpecConfigArgs and StackSpecConfigOutput values.
// You can construct a concrete instance of `StackSpecConfigInput` via:
//
//          StackSpecConfigArgs{...}
type StackSpecConfigInput interface {
	pulumi.Input

	ToStackSpecConfigOutput() StackSpecConfigOutput
	ToStackSpecConfigOutputWithContext(context.Context) StackSpecConfigOutput
}

// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
type StackSpecConfigArgs struct {
}

func (StackSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSpecConfig)(nil)).Elem()
}

func (i StackSpecConfigArgs) ToStackSpecConfigOutput() StackSpecConfigOutput {
	return i.ToStackSpecConfigOutputWithContext(context.Background())
}

func (i StackSpecConfigArgs) ToStackSpecConfigOutputWithContext(ctx context.Context) StackSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSpecConfigOutput)
}

// (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
type StackSpecConfigOutput struct{ *pulumi.OutputState }

func (StackSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSpecConfig)(nil)).Elem()
}

func (o StackSpecConfigOutput) ToStackSpecConfigOutput() StackSpecConfigOutput {
	return o
}

func (o StackSpecConfigOutput) ToStackSpecConfigOutputWithContext(ctx context.Context) StackSpecConfigOutput {
	return o
}

// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
type StackSpecSecrets struct {
}

// StackSpecSecretsInput is an input type that accepts StackSpecSecretsArgs and StackSpecSecretsOutput values.
// You can construct a concrete instance of `StackSpecSecretsInput` via:
//
//          StackSpecSecretsArgs{...}
type StackSpecSecretsInput interface {
	pulumi.Input

	ToStackSpecSecretsOutput() StackSpecSecretsOutput
	ToStackSpecSecretsOutputWithContext(context.Context) StackSpecSecretsOutput
}

// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
type StackSpecSecretsArgs struct {
}

func (StackSpecSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSpecSecrets)(nil)).Elem()
}

func (i StackSpecSecretsArgs) ToStackSpecSecretsOutput() StackSpecSecretsOutput {
	return i.ToStackSpecSecretsOutputWithContext(context.Background())
}

func (i StackSpecSecretsArgs) ToStackSpecSecretsOutputWithContext(ctx context.Context) StackSpecSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSpecSecretsOutput)
}

// (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
type StackSpecSecretsOutput struct{ *pulumi.OutputState }

func (StackSpecSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSpecSecrets)(nil)).Elem()
}

func (o StackSpecSecretsOutput) ToStackSpecSecretsOutput() StackSpecSecretsOutput {
	return o
}

func (o StackSpecSecretsOutput) ToStackSpecSecretsOutputWithContext(ctx context.Context) StackSpecSecretsOutput {
	return o
}

// StackStatus defines the observed state of Stack
type StackStatus struct {
	// LastUpdate contains details of the status of the last update.
	LastUpdate *StackStatusLastUpdate `pulumi:"lastUpdate"`
	// Outputs contains the exported stack output variables resulting from a deployment.
	Outputs map[string]map[string]interface{} `pulumi:"outputs"`
}

// StackStatusInput is an input type that accepts StackStatusArgs and StackStatusOutput values.
// You can construct a concrete instance of `StackStatusInput` via:
//
//          StackStatusArgs{...}
type StackStatusInput interface {
	pulumi.Input

	ToStackStatusOutput() StackStatusOutput
	ToStackStatusOutputWithContext(context.Context) StackStatusOutput
}

// StackStatus defines the observed state of Stack
type StackStatusArgs struct {
	// LastUpdate contains details of the status of the last update.
	LastUpdate StackStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// Outputs contains the exported stack output variables resulting from a deployment.
	Outputs pulumi.MapMapInput `pulumi:"outputs"`
}

func (StackStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStatus)(nil)).Elem()
}

func (i StackStatusArgs) ToStackStatusOutput() StackStatusOutput {
	return i.ToStackStatusOutputWithContext(context.Background())
}

func (i StackStatusArgs) ToStackStatusOutputWithContext(ctx context.Context) StackStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusOutput)
}

func (i StackStatusArgs) ToStackStatusPtrOutput() StackStatusPtrOutput {
	return i.ToStackStatusPtrOutputWithContext(context.Background())
}

func (i StackStatusArgs) ToStackStatusPtrOutputWithContext(ctx context.Context) StackStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusOutput).ToStackStatusPtrOutputWithContext(ctx)
}

// StackStatusPtrInput is an input type that accepts StackStatusArgs, StackStatusPtr and StackStatusPtrOutput values.
// You can construct a concrete instance of `StackStatusPtrInput` via:
//
//          StackStatusArgs{...}
//
//  or:
//
//          nil
type StackStatusPtrInput interface {
	pulumi.Input

	ToStackStatusPtrOutput() StackStatusPtrOutput
	ToStackStatusPtrOutputWithContext(context.Context) StackStatusPtrOutput
}

type stackStatusPtrType StackStatusArgs

func StackStatusPtr(v *StackStatusArgs) StackStatusPtrInput {
	return (*stackStatusPtrType)(v)
}

func (*stackStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackStatus)(nil)).Elem()
}

func (i *stackStatusPtrType) ToStackStatusPtrOutput() StackStatusPtrOutput {
	return i.ToStackStatusPtrOutputWithContext(context.Background())
}

func (i *stackStatusPtrType) ToStackStatusPtrOutputWithContext(ctx context.Context) StackStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusPtrOutput)
}

// StackStatus defines the observed state of Stack
type StackStatusOutput struct{ *pulumi.OutputState }

func (StackStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStatus)(nil)).Elem()
}

func (o StackStatusOutput) ToStackStatusOutput() StackStatusOutput {
	return o
}

func (o StackStatusOutput) ToStackStatusOutputWithContext(ctx context.Context) StackStatusOutput {
	return o
}

func (o StackStatusOutput) ToStackStatusPtrOutput() StackStatusPtrOutput {
	return o.ToStackStatusPtrOutputWithContext(context.Background())
}

func (o StackStatusOutput) ToStackStatusPtrOutputWithContext(ctx context.Context) StackStatusPtrOutput {
	return o.ApplyT(func(v StackStatus) *StackStatus {
		return &v
	}).(StackStatusPtrOutput)
}

// LastUpdate contains details of the status of the last update.
func (o StackStatusOutput) LastUpdate() StackStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v StackStatus) *StackStatusLastUpdate { return v.LastUpdate }).(StackStatusLastUpdatePtrOutput)
}

// Outputs contains the exported stack output variables resulting from a deployment.
func (o StackStatusOutput) Outputs() pulumi.MapMapOutput {
	return o.ApplyT(func(v StackStatus) map[string]map[string]interface{} { return v.Outputs }).(pulumi.MapMapOutput)
}

type StackStatusPtrOutput struct{ *pulumi.OutputState }

func (StackStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackStatus)(nil)).Elem()
}

func (o StackStatusPtrOutput) ToStackStatusPtrOutput() StackStatusPtrOutput {
	return o
}

func (o StackStatusPtrOutput) ToStackStatusPtrOutputWithContext(ctx context.Context) StackStatusPtrOutput {
	return o
}

func (o StackStatusPtrOutput) Elem() StackStatusOutput {
	return o.ApplyT(func(v *StackStatus) StackStatus { return *v }).(StackStatusOutput)
}

// LastUpdate contains details of the status of the last update.
func (o StackStatusPtrOutput) LastUpdate() StackStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *StackStatus) *StackStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(StackStatusLastUpdatePtrOutput)
}

// Outputs contains the exported stack output variables resulting from a deployment.
func (o StackStatusPtrOutput) Outputs() pulumi.MapMapOutput {
	return o.ApplyT(func(v *StackStatus) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Outputs
	}).(pulumi.MapMapOutput)
}

// LastUpdate contains details of the status of the last update.
type StackStatusLastUpdate struct {
	// Last commit attempted
	LastAttemptedCommit *string `pulumi:"lastAttemptedCommit"`
	// Last commit successfully applied
	LastSuccessfulCommit *string `pulumi:"lastSuccessfulCommit"`
	// Permalink is the Pulumi Console URL of the stack operation.
	Permalink *string `pulumi:"permalink"`
	// State is the state of the stack update - one of `succeeded` or `failed`
	State *string `pulumi:"state"`
}

// StackStatusLastUpdateInput is an input type that accepts StackStatusLastUpdateArgs and StackStatusLastUpdateOutput values.
// You can construct a concrete instance of `StackStatusLastUpdateInput` via:
//
//          StackStatusLastUpdateArgs{...}
type StackStatusLastUpdateInput interface {
	pulumi.Input

	ToStackStatusLastUpdateOutput() StackStatusLastUpdateOutput
	ToStackStatusLastUpdateOutputWithContext(context.Context) StackStatusLastUpdateOutput
}

// LastUpdate contains details of the status of the last update.
type StackStatusLastUpdateArgs struct {
	// Last commit attempted
	LastAttemptedCommit pulumi.StringPtrInput `pulumi:"lastAttemptedCommit"`
	// Last commit successfully applied
	LastSuccessfulCommit pulumi.StringPtrInput `pulumi:"lastSuccessfulCommit"`
	// Permalink is the Pulumi Console URL of the stack operation.
	Permalink pulumi.StringPtrInput `pulumi:"permalink"`
	// State is the state of the stack update - one of `succeeded` or `failed`
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (StackStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStatusLastUpdate)(nil)).Elem()
}

func (i StackStatusLastUpdateArgs) ToStackStatusLastUpdateOutput() StackStatusLastUpdateOutput {
	return i.ToStackStatusLastUpdateOutputWithContext(context.Background())
}

func (i StackStatusLastUpdateArgs) ToStackStatusLastUpdateOutputWithContext(ctx context.Context) StackStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusLastUpdateOutput)
}

func (i StackStatusLastUpdateArgs) ToStackStatusLastUpdatePtrOutput() StackStatusLastUpdatePtrOutput {
	return i.ToStackStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i StackStatusLastUpdateArgs) ToStackStatusLastUpdatePtrOutputWithContext(ctx context.Context) StackStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusLastUpdateOutput).ToStackStatusLastUpdatePtrOutputWithContext(ctx)
}

// StackStatusLastUpdatePtrInput is an input type that accepts StackStatusLastUpdateArgs, StackStatusLastUpdatePtr and StackStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `StackStatusLastUpdatePtrInput` via:
//
//          StackStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type StackStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToStackStatusLastUpdatePtrOutput() StackStatusLastUpdatePtrOutput
	ToStackStatusLastUpdatePtrOutputWithContext(context.Context) StackStatusLastUpdatePtrOutput
}

type stackStatusLastUpdatePtrType StackStatusLastUpdateArgs

func StackStatusLastUpdatePtr(v *StackStatusLastUpdateArgs) StackStatusLastUpdatePtrInput {
	return (*stackStatusLastUpdatePtrType)(v)
}

func (*stackStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackStatusLastUpdate)(nil)).Elem()
}

func (i *stackStatusLastUpdatePtrType) ToStackStatusLastUpdatePtrOutput() StackStatusLastUpdatePtrOutput {
	return i.ToStackStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *stackStatusLastUpdatePtrType) ToStackStatusLastUpdatePtrOutputWithContext(ctx context.Context) StackStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusLastUpdatePtrOutput)
}

// LastUpdate contains details of the status of the last update.
type StackStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (StackStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStatusLastUpdate)(nil)).Elem()
}

func (o StackStatusLastUpdateOutput) ToStackStatusLastUpdateOutput() StackStatusLastUpdateOutput {
	return o
}

func (o StackStatusLastUpdateOutput) ToStackStatusLastUpdateOutputWithContext(ctx context.Context) StackStatusLastUpdateOutput {
	return o
}

func (o StackStatusLastUpdateOutput) ToStackStatusLastUpdatePtrOutput() StackStatusLastUpdatePtrOutput {
	return o.ToStackStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o StackStatusLastUpdateOutput) ToStackStatusLastUpdatePtrOutputWithContext(ctx context.Context) StackStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v StackStatusLastUpdate) *StackStatusLastUpdate {
		return &v
	}).(StackStatusLastUpdatePtrOutput)
}

// Last commit attempted
func (o StackStatusLastUpdateOutput) LastAttemptedCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackStatusLastUpdate) *string { return v.LastAttemptedCommit }).(pulumi.StringPtrOutput)
}

// Last commit successfully applied
func (o StackStatusLastUpdateOutput) LastSuccessfulCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackStatusLastUpdate) *string { return v.LastSuccessfulCommit }).(pulumi.StringPtrOutput)
}

// Permalink is the Pulumi Console URL of the stack operation.
func (o StackStatusLastUpdateOutput) Permalink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackStatusLastUpdate) *string { return v.Permalink }).(pulumi.StringPtrOutput)
}

// State is the state of the stack update - one of `succeeded` or `failed`
func (o StackStatusLastUpdateOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackStatusLastUpdate) *string { return v.State }).(pulumi.StringPtrOutput)
}

type StackStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (StackStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackStatusLastUpdate)(nil)).Elem()
}

func (o StackStatusLastUpdatePtrOutput) ToStackStatusLastUpdatePtrOutput() StackStatusLastUpdatePtrOutput {
	return o
}

func (o StackStatusLastUpdatePtrOutput) ToStackStatusLastUpdatePtrOutputWithContext(ctx context.Context) StackStatusLastUpdatePtrOutput {
	return o
}

func (o StackStatusLastUpdatePtrOutput) Elem() StackStatusLastUpdateOutput {
	return o.ApplyT(func(v *StackStatusLastUpdate) StackStatusLastUpdate { return *v }).(StackStatusLastUpdateOutput)
}

// Last commit attempted
func (o StackStatusLastUpdatePtrOutput) LastAttemptedCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedCommit
	}).(pulumi.StringPtrOutput)
}

// Last commit successfully applied
func (o StackStatusLastUpdatePtrOutput) LastSuccessfulCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.LastSuccessfulCommit
	}).(pulumi.StringPtrOutput)
}

// Permalink is the Pulumi Console URL of the stack operation.
func (o StackStatusLastUpdatePtrOutput) Permalink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Permalink
	}).(pulumi.StringPtrOutput)
}

// State is the state of the stack update - one of `succeeded` or `failed`
func (o StackStatusLastUpdatePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Outputs contains the exported stack output variables resulting from a deployment.
type StackStatusOutputs struct {
}

// StackStatusOutputsInput is an input type that accepts StackStatusOutputsArgs and StackStatusOutputsOutput values.
// You can construct a concrete instance of `StackStatusOutputsInput` via:
//
//          StackStatusOutputsArgs{...}
type StackStatusOutputsInput interface {
	pulumi.Input

	ToStackStatusOutputsOutput() StackStatusOutputsOutput
	ToStackStatusOutputsOutputWithContext(context.Context) StackStatusOutputsOutput
}

// Outputs contains the exported stack output variables resulting from a deployment.
type StackStatusOutputsArgs struct {
}

func (StackStatusOutputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStatusOutputs)(nil)).Elem()
}

func (i StackStatusOutputsArgs) ToStackStatusOutputsOutput() StackStatusOutputsOutput {
	return i.ToStackStatusOutputsOutputWithContext(context.Background())
}

func (i StackStatusOutputsArgs) ToStackStatusOutputsOutputWithContext(ctx context.Context) StackStatusOutputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStatusOutputsOutput)
}

// Outputs contains the exported stack output variables resulting from a deployment.
type StackStatusOutputsOutput struct{ *pulumi.OutputState }

func (StackStatusOutputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStatusOutputs)(nil)).Elem()
}

func (o StackStatusOutputsOutput) ToStackStatusOutputsOutput() StackStatusOutputsOutput {
	return o
}

func (o StackStatusOutputsOutput) ToStackStatusOutputsOutputWithContext(ctx context.Context) StackStatusOutputsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackTypeOutput{})
	pulumi.RegisterOutputType(StackMetadataOutput{})
	pulumi.RegisterOutputType(StackSpecOutput{})
	pulumi.RegisterOutputType(StackSpecPtrOutput{})
	pulumi.RegisterOutputType(StackSpecConfigOutput{})
	pulumi.RegisterOutputType(StackSpecSecretsOutput{})
	pulumi.RegisterOutputType(StackStatusOutput{})
	pulumi.RegisterOutputType(StackStatusPtrOutput{})
	pulumi.RegisterOutputType(StackStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(StackStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(StackStatusOutputsOutput{})
}
