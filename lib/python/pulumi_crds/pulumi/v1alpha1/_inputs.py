# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'StackSpecArgs',
    'StackStatusArgs',
    'StackStatusLastUpdateArgs',
]

@pulumi.input_type
class StackSpecArgs:
    def __init__(__self__, *,
                 project_repo: pulumi.Input[str],
                 stack: pulumi.Input[str],
                 access_token_secret: Optional[pulumi.Input[str]] = None,
                 backend: Optional[pulumi.Input[str]] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 commit: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 destroy_on_finalize: Optional[pulumi.Input[bool]] = None,
                 env_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expect_no_refresh_changes: Optional[pulumi.Input[bool]] = None,
                 git_auth_secret: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[bool]] = None,
                 repo_dir: Optional[pulumi.Input[str]] = None,
                 retry_on_update_conflict: Optional[pulumi.Input[bool]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secrets_provider: Optional[pulumi.Input[str]] = None):
        """
        StackSpec defines the desired state of Pulumi Stack being managed by this operator.
        :param pulumi.Input[str] project_repo: ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        :param pulumi.Input[str] stack: Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
        :param pulumi.Input[str] access_token_secret: (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
        :param pulumi.Input[str] backend: (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://<my-pulumi-state-bucket>"   - Azure:                       "azblob://<my-pulumi-state-bucket>"   - GCP:                         "gs://<my-pulumi-state-bucket>" See: https://www.pulumi.com/docs/intro/concepts/state/
        :param pulumi.Input[str] branch: (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
        :param pulumi.Input[str] commit: (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        :param pulumi.Input[bool] destroy_on_finalize: (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env_secrets: (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] envs: (optional) Envs is an optional array of config maps containing environment variables to set.
        :param pulumi.Input[bool] expect_no_refresh_changes: (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        :param pulumi.Input[str] git_auth_secret: (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
        :param pulumi.Input[bool] refresh: (optional) Refresh can be set to true to refresh the stack before it is updated.
        :param pulumi.Input[str] repo_dir: (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        :param pulumi.Input[bool] retry_on_update_conflict: (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secrets: (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        :param pulumi.Input[str] secrets_provider: (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
        """
        pulumi.set(__self__, "project_repo", project_repo)
        pulumi.set(__self__, "stack", stack)
        if access_token_secret is not None:
            pulumi.set(__self__, "access_token_secret", access_token_secret)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if commit is not None:
            pulumi.set(__self__, "commit", commit)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if destroy_on_finalize is not None:
            pulumi.set(__self__, "destroy_on_finalize", destroy_on_finalize)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if expect_no_refresh_changes is not None:
            pulumi.set(__self__, "expect_no_refresh_changes", expect_no_refresh_changes)
        if git_auth_secret is not None:
            pulumi.set(__self__, "git_auth_secret", git_auth_secret)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if repo_dir is not None:
            pulumi.set(__self__, "repo_dir", repo_dir)
        if retry_on_update_conflict is not None:
            pulumi.set(__self__, "retry_on_update_conflict", retry_on_update_conflict)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if secrets_provider is not None:
            pulumi.set(__self__, "secrets_provider", secrets_provider)

    @property
    @pulumi.getter(name="projectRepo")
    def project_repo(self) -> pulumi.Input[str]:
        """
        ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        """
        return pulumi.get(self, "project_repo")

    @project_repo.setter
    def project_repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_repo", value)

    @property
    @pulumi.getter
    def stack(self) -> pulumi.Input[str]:
        """
        Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
        """
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack", value)

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) AccessTokenSecret is the name of a secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
        """
        return pulumi.get(self, "access_token_secret")

    @access_token_secret.setter
    def access_token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_secret", value)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) Backend is an optional backend URL to use for all Pulumi operations. Examples:   - Pulumi Service:              "https://app.pulumi.com" (default)   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com"   - Local:                       "file://./einstein"   - AWS:                         "s3://<my-pulumi-state-bucket>"   - Azure:                       "azblob://<my-pulumi-state-bucket>"   - GCP:                         "gs://<my-pulumi-state-bucket>" See: https://www.pulumi.com/docs/intro/concepts/state/
        """
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name. This is mutually exclusive with the Commit setting. If both are empty, the `master` branch is deployed.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter
    def commit(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. If both are empty, the `master` branch is deployed.
        """
        return pulumi.get(self, "commit")

    @commit.setter
    def commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="destroyOnFinalize")
    def destroy_on_finalize(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the CRD.
        """
        return pulumi.get(self, "destroy_on_finalize")

    @destroy_on_finalize.setter
    def destroy_on_finalize(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destroy_on_finalize", value)

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (optional) SecretEnvs is an optional array of secret names containing environment variables to set.
        """
        return pulumi.get(self, "env_secrets")

    @env_secrets.setter
    def env_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "env_secrets", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (optional) Envs is an optional array of config maps containing environment variables to set.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="expectNoRefreshChanges")
    def expect_no_refresh_changes(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        """
        return pulumi.get(self, "expect_no_refresh_changes")

    @expect_no_refresh_changes.setter
    def expect_no_refresh_changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expect_no_refresh_changes", value)

    @property
    @pulumi.getter(name="gitAuthSecret")
    def git_auth_secret(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) GitAuthSecret is the the name of a secret containing an authentication option for the git repository. There are 3 different authentication options:   * Personal access token   * SSH private key (and it's optional password)   * Basic auth username and password Only 1 authentication path is valid.
        """
        return pulumi.get(self, "git_auth_secret")

    @git_auth_secret.setter
    def git_auth_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_auth_secret", value)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) Refresh can be set to true to refresh the stack before it is updated.
        """
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter(name="repoDir")
    def repo_dir(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        """
        return pulumi.get(self, "repo_dir")

    @repo_dir.setter
    def repo_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_dir", value)

    @property
    @pulumi.getter(name="retryOnUpdateConflict")
    def retry_on_update_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        """
        return pulumi.get(self, "retry_on_update_conflict")

    @retry_on_update_conflict.setter
    def retry_on_update_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retry_on_update_conflict", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="secretsProvider")
    def secrets_provider(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples:   - AWS:   "awskms://arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" See: https://www.pulumi.com/docs/intro/concepts/config/#initializing-a-stack-with-alternative-encryption
        """
        return pulumi.get(self, "secrets_provider")

    @secrets_provider.setter
    def secrets_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets_provider", value)


@pulumi.input_type
class StackStatusArgs:
    def __init__(__self__, *,
                 last_update: Optional[pulumi.Input['StackStatusLastUpdateArgs']] = None,
                 outputs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]] = None):
        """
        StackStatus defines the observed state of Stack
        :param pulumi.Input['StackStatusLastUpdateArgs'] last_update: LastUpdate contains details of the status of the last update.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]] outputs: Outputs contains the exported stack output variables resulting from a deployment.
        """
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input['StackStatusLastUpdateArgs']]:
        """
        LastUpdate contains details of the status of the last update.
        """
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input['StackStatusLastUpdateArgs']]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]:
        """
        Outputs contains the exported stack output variables resulting from a deployment.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "outputs", value)


@pulumi.input_type
class StackStatusLastUpdateArgs:
    def __init__(__self__, *,
                 last_attempted_commit: Optional[pulumi.Input[str]] = None,
                 last_successful_commit: Optional[pulumi.Input[str]] = None,
                 permalink: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        LastUpdate contains details of the status of the last update.
        :param pulumi.Input[str] last_attempted_commit: Last commit attempted
        :param pulumi.Input[str] last_successful_commit: Last commit successfully applied
        :param pulumi.Input[str] permalink: Permalink is the Pulumi Console URL of the stack operation.
        :param pulumi.Input[str] state: State is the state of the stack update - one of `succeeded` or `failed`
        """
        if last_attempted_commit is not None:
            pulumi.set(__self__, "last_attempted_commit", last_attempted_commit)
        if last_successful_commit is not None:
            pulumi.set(__self__, "last_successful_commit", last_successful_commit)
        if permalink is not None:
            pulumi.set(__self__, "permalink", permalink)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lastAttemptedCommit")
    def last_attempted_commit(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit attempted
        """
        return pulumi.get(self, "last_attempted_commit")

    @last_attempted_commit.setter
    def last_attempted_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_attempted_commit", value)

    @property
    @pulumi.getter(name="lastSuccessfulCommit")
    def last_successful_commit(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit successfully applied
        """
        return pulumi.get(self, "last_successful_commit")

    @last_successful_commit.setter
    def last_successful_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_successful_commit", value)

    @property
    @pulumi.getter
    def permalink(self) -> Optional[pulumi.Input[str]]:
        """
        Permalink is the Pulumi Console URL of the stack operation.
        """
        return pulumi.get(self, "permalink")

    @permalink.setter
    def permalink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permalink", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State is the state of the stack update - one of `succeeded` or `failed`
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


