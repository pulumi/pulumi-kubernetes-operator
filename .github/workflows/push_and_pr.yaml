name: Pulumi Kubernetes Operator
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
jobs:
  operator-build:
    runs-on: ubuntu-latest
    name: Build
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.16.2'
    - name: GoReleaser
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist --skip-sign
  operator-int-tests:
    runs-on: ubuntu-latest
    name: Integration Testing
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.16.2'
    - name: Install Ginkgo testing framework
      run: go install github.com/onsi/ginkgo/ginkgo
    - name: Setup gcloud CLI for GKE testing cluster
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        export_default_credentials: true
    - name: Configure AWS credentials to use in AWS Stack tests
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        role-duration-seconds: 3600
        role-external-id: "pulumi-kubernetes-operator"
        role-session-name: "pulumi-kubernetes-operator@githubActions"
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    - name: Install Pulumi CLI
      run: |
        # Install Pulumi
        curl -fsSL https://get.pulumi.com | bash -s
    - name: Set env variables and path
      run: |
        echo '$HOME/.pulumi/bin' >> $GITHUB_PATH
        echo "STACK=ci-cluster-$(head /dev/urandom | LC_CTYPE=C tr -dc '[:lower:]' | head -c5)" >> $GITHUB_ENV
    - name: Tests
      run: |
        # Create GKE test cluster to install CRDs and use with the test operator.
        scripts/ci-cluster-create.sh

        # Run tests
        make codegen install-crds
        make test
    - name: Cleanup
      if: ${{ always() }}
      run: |
        scripts/ci-cluster-destroy.sh
