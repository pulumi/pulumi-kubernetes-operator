// Copyright 2016-2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	autov1alpha1 "github.com/pulumi/pulumi-kubernetes-operator/v2/operator/api/auto/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// UpdateSpecApplyConfiguration represents a declarative configuration of the UpdateSpec type for use
// with apply.
type UpdateSpecApplyConfiguration struct {
	WorkspaceName     *string                  `json:"workspaceName,omitempty"`
	StackName         *string                  `json:"stackName,omitempty"`
	Type              *autov1alpha1.UpdateType `json:"type,omitempty"`
	TtlAfterCompleted *v1.Duration             `json:"ttlAfterCompleted,omitempty"`
	Parallel          *int32                   `json:"parallel,omitempty"`
	Message           *string                  `json:"message,omitempty"`
	ExpectNoChanges   *bool                    `json:"expectNoChanges,omitempty"`
	Replace           []string                 `json:"replace,omitempty"`
	Target            []string                 `json:"target,omitempty"`
	TargetDependents  *bool                    `json:"targetDependents,omitempty"`
	Refresh           *bool                    `json:"refresh,omitempty"`
	ContinueOnError   *bool                    `json:"continueOnError,omitempty"`
	Remove            *bool                    `json:"remove,omitempty"`
}

// UpdateSpecApplyConfiguration constructs a declarative configuration of the UpdateSpec type for use with
// apply.
func UpdateSpec() *UpdateSpecApplyConfiguration {
	return &UpdateSpecApplyConfiguration{}
}

// WithWorkspaceName sets the WorkspaceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkspaceName field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithWorkspaceName(value string) *UpdateSpecApplyConfiguration {
	b.WorkspaceName = &value
	return b
}

// WithStackName sets the StackName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StackName field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithStackName(value string) *UpdateSpecApplyConfiguration {
	b.StackName = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithType(value autov1alpha1.UpdateType) *UpdateSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithTtlAfterCompleted sets the TtlAfterCompleted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TtlAfterCompleted field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithTtlAfterCompleted(value v1.Duration) *UpdateSpecApplyConfiguration {
	b.TtlAfterCompleted = &value
	return b
}

// WithParallel sets the Parallel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parallel field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithParallel(value int32) *UpdateSpecApplyConfiguration {
	b.Parallel = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithMessage(value string) *UpdateSpecApplyConfiguration {
	b.Message = &value
	return b
}

// WithExpectNoChanges sets the ExpectNoChanges field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExpectNoChanges field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithExpectNoChanges(value bool) *UpdateSpecApplyConfiguration {
	b.ExpectNoChanges = &value
	return b
}

// WithReplace adds the given value to the Replace field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Replace field.
func (b *UpdateSpecApplyConfiguration) WithReplace(values ...string) *UpdateSpecApplyConfiguration {
	for i := range values {
		b.Replace = append(b.Replace, values[i])
	}
	return b
}

// WithTarget adds the given value to the Target field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Target field.
func (b *UpdateSpecApplyConfiguration) WithTarget(values ...string) *UpdateSpecApplyConfiguration {
	for i := range values {
		b.Target = append(b.Target, values[i])
	}
	return b
}

// WithTargetDependents sets the TargetDependents field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetDependents field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithTargetDependents(value bool) *UpdateSpecApplyConfiguration {
	b.TargetDependents = &value
	return b
}

// WithRefresh sets the Refresh field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Refresh field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithRefresh(value bool) *UpdateSpecApplyConfiguration {
	b.Refresh = &value
	return b
}

// WithContinueOnError sets the ContinueOnError field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ContinueOnError field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithContinueOnError(value bool) *UpdateSpecApplyConfiguration {
	b.ContinueOnError = &value
	return b
}

// WithRemove sets the Remove field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Remove field is set to the value of the last call.
func (b *UpdateSpecApplyConfiguration) WithRemove(value bool) *UpdateSpecApplyConfiguration {
	b.Remove = &value
	return b
}
