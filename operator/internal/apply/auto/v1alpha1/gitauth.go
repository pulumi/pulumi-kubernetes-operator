/*
Copyright 2024, Pulumi Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// GitAuthApplyConfiguration represents a declarative configuration of the GitAuth type for use
// with apply.
type GitAuthApplyConfiguration struct {
	SSHPrivateKey *v1.SecretKeySelector `json:"sshPrivateKey,omitempty"`
	Username      *v1.SecretKeySelector `json:"username,omitempty"`
	Password      *v1.SecretKeySelector `json:"password,omitempty"`
	Token         *v1.SecretKeySelector `json:"token,omitempty"`
}

// GitAuthApplyConfiguration constructs a declarative configuration of the GitAuth type for use with
// apply.
func GitAuth() *GitAuthApplyConfiguration {
	return &GitAuthApplyConfiguration{}
}

// WithSSHPrivateKey sets the SSHPrivateKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SSHPrivateKey field is set to the value of the last call.
func (b *GitAuthApplyConfiguration) WithSSHPrivateKey(value v1.SecretKeySelector) *GitAuthApplyConfiguration {
	b.SSHPrivateKey = &value
	return b
}

// WithUsername sets the Username field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Username field is set to the value of the last call.
func (b *GitAuthApplyConfiguration) WithUsername(value v1.SecretKeySelector) *GitAuthApplyConfiguration {
	b.Username = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *GitAuthApplyConfiguration) WithPassword(value v1.SecretKeySelector) *GitAuthApplyConfiguration {
	b.Password = &value
	return b
}

// WithToken sets the Token field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Token field is set to the value of the last call.
func (b *GitAuthApplyConfiguration) WithToken(value v1.SecretKeySelector) *GitAuthApplyConfiguration {
	b.Token = &value
	return b
}
