// Copyright 2016-2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// UpdateStatusApplyConfiguration represents a declarative configuration of the UpdateStatus type for use
// with apply.
type UpdateStatusApplyConfiguration struct {
	ObservedGeneration *int64                               `json:"observedGeneration,omitempty"`
	StartTime          *v1.Time                             `json:"startTime,omitempty"`
	EndTime            *v1.Time                             `json:"endTime,omitempty"`
	Permalink          *string                              `json:"permalink,omitempty"`
	Message            *string                              `json:"message,omitempty"`
	Outputs            *string                              `json:"outputs,omitempty"`
	Conditions         []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// UpdateStatusApplyConfiguration constructs a declarative configuration of the UpdateStatus type for use with
// apply.
func UpdateStatus() *UpdateStatusApplyConfiguration {
	return &UpdateStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *UpdateStatusApplyConfiguration) WithObservedGeneration(value int64) *UpdateStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithStartTime sets the StartTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTime field is set to the value of the last call.
func (b *UpdateStatusApplyConfiguration) WithStartTime(value v1.Time) *UpdateStatusApplyConfiguration {
	b.StartTime = &value
	return b
}

// WithEndTime sets the EndTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndTime field is set to the value of the last call.
func (b *UpdateStatusApplyConfiguration) WithEndTime(value v1.Time) *UpdateStatusApplyConfiguration {
	b.EndTime = &value
	return b
}

// WithPermalink sets the Permalink field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Permalink field is set to the value of the last call.
func (b *UpdateStatusApplyConfiguration) WithPermalink(value string) *UpdateStatusApplyConfiguration {
	b.Permalink = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *UpdateStatusApplyConfiguration) WithMessage(value string) *UpdateStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithOutputs sets the Outputs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Outputs field is set to the value of the last call.
func (b *UpdateStatusApplyConfiguration) WithOutputs(value string) *UpdateStatusApplyConfiguration {
	b.Outputs = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *UpdateStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *UpdateStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
